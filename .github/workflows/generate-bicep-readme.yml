name: Generate Markdown
on:
  pull_request:
    branches:
      - main
   
env:
  github_user_name: 'github-actions'
  github_email: '41898282+github-actions[bot]@users.noreply.github.com'
  github_commit_message: 'Generate Parameter Markdowns'
  github_pr_number: ${{ github.event.number }}
  github_pr_repo: ${{ github.event.pull_request.head.repo.full_name }}
 
permissions:
  contents: write
  issues: write
  pull-requests: write
 
jobs:
  arm_docs_Polaris:
    name: Generate Markdown
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout
        uses: actions/checkout@v3
 
      - name: Show env
        run: env | sort
 
      - name: Create issue using REST API
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Token ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "[IAC-Generate Markdown]",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.",
            "labels":["Generate Markdown"]}' \
          --fail
 
      - name: Configure local git
        run: |
          echo "git user name  : $github_user_name"
          git config --global user.name "$github_user_name"
          echo "git user email : $github_email"
          git config --global user.email "$github_email"
 
      - name: Create Branch
        id: create_branch
        run: |
          BRANCH_NAME=Feature/IAC-Generate-Markdown
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
 
      - name: Bicep Build Polaris
        id: bicep_build_Polaris
        shell: pwsh
        run: |
          $RepoPath = $env:GITHUB_WORKSPACE + '/Polaris/'
          $ignorepath = '/home/runner/work/azure-devops/azure-devops/modules/'
          Get-ChildItem -Recurse -Path $RepoPath -Filter '*.bicep' -Exclude 'callModuleFromACR.example.bicep','orchHubSpoke.bicep', $ignorepath | ForEach-Object {
              Write-Information "==> Attempting Bicep Build For File: $_" -InformationAction Continue
              $output = bicep build $_.FullName 2>&1
              if ($LastExitCode -ne 0) {
                throw $output
              } Else {
                echo $output
              } 2>$null
          }
 
      - name: Generate ARM markdowns Polaris
        shell: pwsh
        run: |
          $RepoPath = $env:GITHUB_WORKSPACE + '/Polaris/'
          Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force;
          # Scan for Azure template file recursively in the infra-as-code/bicep/ directory
          Get-AzDocTemplateFile -Path $RepoPath | ForEach-Object {
            # Generate a standard name of the markdown file. i.e. <name>_<version>.md
            $template = Get-Item -Path $_.TemplateFile;
            $templateraw = Get-Content -Raw -Path $_.Templatefile;
            $templateName = $template.Directory.Parent.Name;
            $version = "bicep";
            $docNameWithoutExtension = [System.IO.Path]::GetFileNameWithoutExtension($template.Name);
            $docName = "$($docNameWithoutExtension).$version";
 
            $outputpathformds = $template.DirectoryName+'/generateddocs'
            New-Item -Path $outputpathformds -ItemType Directory -Force
 
            # Generate markdown
            Invoke-PSDocument -Module PSDocs.Azure -OutputPath $outputpathformds -InputObject $template.FullName -InstanceName $docName -Culture en-US;
          }
 
      - name: Bicep Build Shared Services
        id: bicep_build_shared_services
        shell: pwsh
        run: |
          $RepoPath = $env:GITHUB_WORKSPACE + '/Shared-Services/'
          $ignorepath = '/home/runner/work/azure-devops/azure-devops/modules/'
          Get-ChildItem -Recurse -Path $RepoPath -Filter '*.bicep' -Exclude 'callModuleFromACR.example.bicep','orchHubSpoke.bicep', $ignorepath | ForEach-Object {
              Write-Information "==> Attempting Bicep Build For File: $_" -InformationAction Continue
              $output = bicep build $_.FullName 2>&1
              if ($LastExitCode -ne 0) {
                throw $output
              } Else {
                echo $output
              } 2>$null
          }
 
      - name: Generate ARM markdowns Shared Services
        shell: pwsh
        run: |
          $RepoPath = $env:GITHUB_WORKSPACE + '/Shared-Services/'
          Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force;
          # Scan for Azure template file recursively in the infra-as-code/bicep/ directory
          Get-AzDocTemplateFile -Path $RepoPath | ForEach-Object {
            # Generate a standard name of the markdown file. i.e. <name>_<version>.md
            $template = Get-Item -Path $_.TemplateFile;
            $templateraw = Get-Content -Raw -Path $_.Templatefile;
            $templateName = $template.Directory.Parent.Name;
            $version = "bicep";
            $docNameWithoutExtension = [System.IO.Path]::GetFileNameWithoutExtension($template.Name);
            $docName = "$($docNameWithoutExtension).$version";
 
            $outputpathformds = $template.DirectoryName+'/generateddocs'
            New-Item -Path $outputpathformds -ItemType Directory -Force
 
            # Generate markdown
            Invoke-PSDocument -Module PSDocs.Azure -OutputPath $outputpathformds -InputObject $template.FullName -InstanceName $docName -Culture en-US;
          }
 
      - name: Check git status
        run: |
          echo "==> Check git status..."
          git status --short --branch
 
      - name: Commit new changes
        run: |
          git add .
          git commit -m "Generate Markdown run completed"
          git push origin ${{ env.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Create Pull Request
        id: create_pr
        run: |
          PR_TITLE="Automated PR: Generate Markdown"
          PR_BODY="This pull request contains the changes generated by the generate markdown script"
          PR_OUTPUT=$(gh pr create --head ${{env.branch_name}} --base main --title "$PR_TITLE" --body "$PR_BODY")
          PR_NUMBER=$(echo "$PR_OUTPUT" | grep -oP '#\d+' | tr -d '#')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Check out PR
        run: |
          echo "==> Check out PR..."
          gh pr checkout "$github_pr_number"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  close-issue:
    runs-on: ubuntu-latest
    needs: arm_docs_Polaris
    steps:
 
      - name: Checkout
        uses: actions/checkout@v3
   
      - name: Close Markdown Issue
        id: close_generate_markdown_issue
        run: |
          ISSUE_TITLE="[IAC-Generate Markdown]"
          ISSUE_NUMBER=$(gh issue list --search "$ISSUE_TITLE" --json number,title --jq '.[] | select(.title=="[IAC-Generate Markdown]") | .number')
   
          if [ -n "$ISSUE_NUMBER" ]; then
            gh issue close "$ISSUE_NUMBER" --comment "Closing issue as markdown is finished"
          else
            echo "No issue found with the title '[IAC-Generate Markdown]'."
          fi
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}